# -*- coding: utf-8 -*-
"""Dragon-7.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JdbWsk-6YXITWNiRpcnSJTqJ6RIxL9Rf
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Set up Streamlit app for mobile
st.set_page_config(page_title="Dragon 7 Counter", layout="centered")

class Dragon7Counter:
    def __init__(self, total_decks=8):
        self.running_count = 0
        self.total_decks = total_decks
        self.remaining_decks = total_decks
        self.cards_dealt = 0
        self.history = []  # Stores history of hands

    def update_count(self, card):
        """ Updates the running count based on the card drawn """
        if card in [4, 5, 6, 7]:  # These cards reduce Dragon 7 chance
            self.running_count -= 1
        elif card in [8, 9]:  # These cards increase Dragon 7 chance
            self.running_count += 2

        self.cards_dealt += 1
        self.update_decks()

        # Save history
        self.history.append({
            "Hand": self.cards_dealt,
            "Card": card,
            "Running Count": self.running_count,
            "Decks Remaining": self.remaining_decks,
            "True Count": self.get_true_count()
        })

    def update_decks(self):
        """ Updates the number of decks remaining in the shoe """
        self.remaining_decks = max(1, self.total_decks - (self.cards_dealt / 52))

    def get_true_count(self):
        """ Calculates the true count """
        return self.running_count / self.remaining_decks

    def should_bet_dragon7(self):
        """ Decides if it's time to bet on Dragon 7 """
        return self.get_true_count() >= 4

# Streamlit UI
st.title("🐉 Dragon 7 Counter - Improved Strategy")
st.write("Track the Dragon 7 side bet using real-time card counting!")

# Initialize session state for counter
if "counter" not in st.session_state:
    st.session_state.counter = Dragon7Counter()

counter = st.session_state.counter

# Display Current Count
st.subheader(f"📊 Running Count: {counter.running_count}")
st.subheader(f"📉 True Count: {counter.get_true_count():.2f}")
st.subheader(f"📦 Decks Remaining: {counter.remaining_decks:.2f}")

# Dragon 7 Betting Recommendation
if counter.should_bet_dragon7():
    st.success("🔥 Time to bet on Dragon 7! ✅")
else:
    st.warning("🚫 No Dragon 7 bet yet.")

# Expandable section for history & graph
with st.expander("📜 Hand History & True Count Graph", expanded=False):
    if counter.history:
        st.write("### Hand History")
        df = pd.DataFrame(counter.history)
        st.dataframe(df, height=200)  # Scrollable history table

        # Plot True Count Over Time
        st.write("### True Count Trend")
        fig, ax = plt.subplots()
        ax.plot(df["Hand"], df["True Count"], marker="o", linestyle="-", color="blue", label="True Count")
        ax.set_xlabel("Hand Number")
        ax.set_ylabel("True Count")
        ax.axhline(y=4, color="red", linestyle="--", label="Dragon 7 Bet Threshold")
        ax.legend()
        st.pyplot(fig)

# Card Input Buttons (Bigger for Mobile)
st.write("### 🃏 Tap a Card to Track It")

col1, col2, col3 = st.columns(3)
with col1:
    if st.button("4️⃣"):
        counter.update_count(4)
    if st.button("5️⃣"):
        counter.update_count(5)
    if st.button("6️⃣"):
        counter.update_count(6)

with col2:
    if st.button("7️⃣"):
        counter.update_count(7)
    if st.button("8️⃣"):
        counter.update_count(8)
    if st.button("9️⃣"):
        counter.update_count(9)

with col3:
    if st.button("🔟 / J / Q / K"):
        counter.update_count(10)
    if st.button("🅰️ (Ace)"):
        counter.update_count(1)

st.write("")
if st.button("🔄 Reset Counter"):
    st.session_state.counter = Dragon7Counter()